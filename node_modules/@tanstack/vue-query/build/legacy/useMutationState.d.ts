import { Ref } from 'vue-demi';
import { MutationFilters as MutationFilters$1, MutationState, Mutation } from '@tanstack/query-core';
import { Q as QueryClient } from './queryClient-BCt_J-HC.js';
import { MaybeRefDeep } from './types.js';

type MutationFilters = MaybeRefDeep<MutationFilters$1>;
declare function useIsMutating(filters?: MutationFilters, queryClient?: QueryClient): Ref<number>;
type MutationStateOptions<TResult = MutationState> = {
    filters?: MutationFilters;
    select?: (mutation: Mutation) => TResult;
};
declare function useMutationState<TResult = MutationState>(options?: MutationStateOptions<TResult>, queryClient?: QueryClient): Readonly<Ref<Array<TResult>>>;

export { type MutationFilters, type MutationStateOptions, useIsMutating, useMutationState };
