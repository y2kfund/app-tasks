{"version":3,"file":"ProblemCollector.js","sourceRoot":"","sources":["../src/ProblemCollector.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAE3D,gEAAsE;AAItE,yDAAqF;AAuBrF;;;;;;;;;;GAUG;AACH,MAAa,gBAAiB,SAAQ,mCAAgB;IAKpD,YAAmB,OAAiC;QAClD,KAAK,CAAC,OAAO,CAAC,CAAC;QAJA,cAAS,GAAkB,IAAI,GAAG,EAAE,CAAC;QAMpD,IACE,CAAC,OAAO;YACR,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,IAAI,OAAO,CAAC,QAAQ,CAAC,MAAM,KAAK,CAAC,CAAC;gBACnD,CAAC,CAAC,OAAO,CAAC,WAAW,IAAI,OAAO,CAAC,WAAW,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,EAC7D,CAAC;YACD,MAAM,IAAI,KAAK,CAAC,yDAAyD,CAAC,CAAC;QAC7E,CAAC;QAED,MAAM,QAAQ,GAAsB,OAAO,CAAC,WAAW;YACrD,CAAC,CAAC,IAAA,0CAAwB,EAAC,OAAO,CAAC,WAAW,CAAC;YAC/C,CAAC,CAAC,EAAE,CAAC;QACP,IAAI,CAAC,SAAS,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,QAAQ,IAAI,EAAE,CAAC,EAAE,GAAG,QAAQ,CAAC,CAAC;QAC5D,IAAI,IAAI,CAAC,SAAS,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YAChC,MAAM,IAAI,KAAK,CAAC,yDAAyD,CAAC,CAAC;QAC7E,CAAC;QACD,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC,SAAS,CAAC;IACtC,CAAC;IAED;;OAEG;IACH,IAAW,QAAQ;QACjB,OAAO,IAAI,CAAC,SAAS,CAAC;IACxB,CAAC;IAED;;OAEG;IACO,YAAY,CAAC,KAAqB;;QAC1C,MAAM,IAAI,GAAW,KAAK,CAAC,IAAI,CAAC;QAChC,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,KAAK,IAAI,EAAE,CAAC;YACxD,MAAM,IAAI,KAAK,CACb,iFAAiF;gBAC/E,iBAAiB;gBACjB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CACvB,CAAC;QACJ,CAAC;QAED,KAAK,MAAM,OAAO,IAAI,IAAI,CAAC,SAAS,EAAE,CAAC;YACrC,MAAM,OAAO,GAAqB,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACrD,IAAI,OAAO,EAAE,CAAC;gBACZ,MAAM,SAAS,GAAa;oBAC1B,GAAG,OAAO;oBACV,WAAW,EAAE,OAAO,CAAC,IAAI;iBAC1B,CAAC;gBACF,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;gBAC9B,MAAA,IAAI,CAAC,UAAU,qDAAG,SAAS,CAAC,CAAC;YAC/B,CAAC;QACH,CAAC;IACH,CAAC;IAED;;OAEG;IACO,OAAO;;QACf,KAAK,MAAM,OAAO,IAAI,IAAI,CAAC,SAAS,EAAE,CAAC;YACrC,IAAI,OAAO,CAAC,KAAK,EAAE,CAAC;gBAClB,MAAM,OAAO,GAAe,OAAO,CAAC,KAAK,EAAE,CAAC;gBAC5C,IAAI,OAAO,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;oBAClC,KAAK,MAAM,OAAO,IAAI,OAAO,EAAE,CAAC;wBAC9B,MAAM,SAAS,GAAa;4BAC1B,GAAG,OAAO;4BACV,WAAW,EAAE,OAAO,CAAC,IAAI;yBAC1B,CAAC;wBACF,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;wBAC9B,MAAA,IAAI,CAAC,UAAU,qDAAG,SAAS,CAAC,CAAC;oBAC/B,CAAC;gBACH,CAAC;YACH,CAAC;QACH,CAAC;IACH,CAAC;CACF;AA/ED,4CA+EC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport { parseProblemMatchersJson } from '@rushstack/problem-matcher';\nimport type { IProblemMatcher, IProblemMatcherJson, IProblem } from '@rushstack/problem-matcher';\n\nimport type { ITerminalChunk } from './ITerminalChunk';\nimport { type ITerminalWritableOptions, TerminalWritable } from './TerminalWritable';\nimport type { IProblemCollector } from './IProblemCollector';\n\n/**\n * Constructor options for {@link ProblemCollector}.\n * @beta\n */\nexport interface IProblemCollectorOptions extends ITerminalWritableOptions {\n  /**\n   * The set of matchers that will be applied to each incoming line. Must contain at least one item.\n   */\n  matchers?: IProblemMatcher[];\n  /**\n   * VS Code style problem matcher definitions. These will be converted to\n   * {@link @rushstack/problem-matcher#IProblemMatcher | IProblemMatcher} definitions.\n   */\n  matcherJson?: IProblemMatcherJson[];\n  /**\n   * Optional callback invoked immediately whenever a problem is produced.\n   */\n  onProblem?: (problem: IProblem) => void;\n}\n\n/**\n * A {@link TerminalWritable} that consumes line-oriented terminal output and extracts structured\n * problems using one or more {@link @rushstack/problem-matcher#IProblemMatcher | IProblemMatcher} instances.\n *\n * @remarks\n * This collector expects that each incoming {@link ITerminalChunk} represents a single line terminated\n * by a `\"\\n\"` character (for example when preceded by {@link StderrLineTransform} / `StdioLineTransform`).\n * If a chunk does not end with a newline an error is thrown to surface incorrect pipeline wiring early.\n *\n * @beta\n */\nexport class ProblemCollector extends TerminalWritable implements IProblemCollector {\n  private readonly _matchers: IProblemMatcher[];\n  private readonly _problems: Set<IProblem> = new Set();\n  private readonly _onProblem: ((problem: IProblem) => void) | undefined;\n\n  public constructor(options: IProblemCollectorOptions) {\n    super(options);\n\n    if (\n      !options ||\n      ((!options.matchers || options.matchers.length === 0) &&\n        (!options.matcherJson || options.matcherJson.length === 0))\n    ) {\n      throw new Error('ProblemCollector requires at least one problem matcher.');\n    }\n\n    const fromJson: IProblemMatcher[] = options.matcherJson\n      ? parseProblemMatchersJson(options.matcherJson)\n      : [];\n    this._matchers = [...(options.matchers || []), ...fromJson];\n    if (this._matchers.length === 0) {\n      throw new Error('ProblemCollector requires at least one problem matcher.');\n    }\n    this._onProblem = options.onProblem;\n  }\n\n  /**\n   * {@inheritdoc IProblemCollector}\n   */\n  public get problems(): ReadonlySet<IProblem> {\n    return this._problems;\n  }\n\n  /**\n   * {@inheritdoc TerminalWritable}\n   */\n  protected onWriteChunk(chunk: ITerminalChunk): void {\n    const text: string = chunk.text;\n    if (text.length === 0 || text[text.length - 1] !== '\\n') {\n      throw new Error(\n        'ProblemCollector expects chunks that were split into newline terminated lines. ' +\n          'Invalid input: ' +\n          JSON.stringify(text)\n      );\n    }\n\n    for (const matcher of this._matchers) {\n      const problem: IProblem | false = matcher.exec(text);\n      if (problem) {\n        const finalized: IProblem = {\n          ...problem,\n          matcherName: matcher.name\n        };\n        this._problems.add(finalized);\n        this._onProblem?.(finalized);\n      }\n    }\n  }\n\n  /**\n   * {@inheritdoc TerminalWritable}\n   */\n  protected onClose(): void {\n    for (const matcher of this._matchers) {\n      if (matcher.flush) {\n        const flushed: IProblem[] = matcher.flush();\n        if (flushed && flushed.length > 0) {\n          for (const problem of flushed) {\n            const finalized: IProblem = {\n              ...problem,\n              matcherName: matcher.name\n            };\n            this._problems.add(finalized);\n            this._onProblem?.(finalized);\n          }\n        }\n      }\n    }\n  }\n}\n"]}